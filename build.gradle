buildscript {
    repositories {
        jcenter()
    }

    dependencies {
        classpath group: 'com.bmuschko', name: 'gradle-docker-plugin', version: "${gradleDockerPluginVersion}"
    }
}

plugins {
    id 'com.palantir.git-version' version '0.1.3'
    id 'org.unbroken-dome.test-sets' version '1.2.0'
}

apply plugin: 'application'
apply plugin: 'checkstyle'
apply plugin: 'com.bmuschko.docker-java-application'
apply plugin: 'findbugs'
apply plugin: 'java'
apply plugin: 'pmd'

group 'com.sharpandrew'
version gitVersion()

mainClassName = 'com.sharpandrew.learndropwizard.LearnDropwizardApplication'
sourceCompatibility = 1.8

repositories {
    mavenCentral()
}

sourceSets {
    main.java.srcDir "src/main/java"
    main.resources.srcDir "src/main/resources"
}

def dockerImageName = "ags799/${name}"
def dockerTagName = "${dockerImageName}:${version}"
def dockerPort = 8080
docker {
    javaApplication {
        baseImage = 'openjdk:8u102'
        maintainer = 'Andrew Sharp "me@sharpandrew.com"'
        ports = [dockerPort]
        tag = dockerTagName
    }
    url = 'unix:///var/run/docker.sock'
}

task dockerBuild(dependsOn: dockerBuildImage, group: 'docker', type: Exec) {
    commandLine 'docker', 'tag', dockerTagName, "${dockerImageName}:latest"
}

testSets {
    integrationTest
}

integrationTest.dependsOn dockerBuild

configurations {
    dockerJava {
        resolutionStrategy {
            force 'de.gesellix:unix-socket-factory:2016-04-06T22-21-19'
        }
    }
}

dependencies {
    compile group: 'io.dropwizard', name: 'dropwizard-core', version: "${dropwizardVersion}"
    compile group: 'org.apache.commons', name: 'commons-lang3', version: "${apacheCommonsLangVersion}"
    compile group: 'org.immutables', name: 'value', version: "${immutablesVersion}"

    testCompile group: 'junit', name: 'junit', version: "${junitVersion}"

    integrationTestCompile group: 'org.testcontainers', name: 'testcontainers', version: "${testContainersVersion}"
}

checkstyle {
    configFile = file('checkstyle.xml')
    ignoreFailures = false
    toolVersion = "${checkstyleVersion}"
}

findbugs {
    excludeFilter = file('findbugs-exclude.xml')
}

task dockerRun(dependsOn: 'dockerBuild', group: 'docker', type: Exec) {
    commandLine 'docker', 'run', '--rm', '-p', "${dockerPort}:${dockerPort}", dockerTagName, 'server'
}
